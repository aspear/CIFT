/** 
*    CIFT (Compiler Instrumentation Function Tracer) CTF format metadata 
*    
*    the C representation of the data structures is effectively what you
*    see below for a 32 bit machine. (see cift.h for actual representation):
*    
*    typedef struct
*    {
*        uint32_t        event_id;    // the type of the event, see CIFT_EVENT_TYPE
*        uint64_t        timestamp;   // high precision timestamp
*        uint32_t        context;     // the thread of the event 
*        void*           func_called; // the function that was called
*        void*           called_from; // the location that the call was made
*    } CIFT_EVENT;
*/

trace {
    major = 0;
    minor = 1;
    uuid = "2a6422d0-6cee-11e0-8c08-cb07d7b3a564";
};

/* Architecture with 32-bit pointers, 32-bit integers, 64 bit time stamp */
typealias integer { size = 32; align = 32; signed = false; } := void *;
typealias integer { size = 64; align = 64; signed = false; } := timestamp_t;
typealias integer { size = 32; align = 32; signed = false; } := uint32_t;

stream {
    id = 0;
    event.header := struct {
        uint32_t    id;
        timestamp_t timestamp;
    };
    event.context := struct {
        uint32_t    thread_id;
    };          
};

/** event header and context is implied for every event in the stream */
event {
    name = func_enter;
    id   = 1;
    stream_id = 0;
    fields := struct {
        void* func_called;
        void* called_from;
    };
};

/* function exit events are the same layout as enter, but the interpretation
* of the PC values is different.  the first is the function (same), the second
* is the location inside of the function that it exited/returned from
*/
event {
    name = func_exit;
    id   = 2;
    stream_id = 0;
    fields := struct {
        void* func_exiting;
        void* exit_pc;
    };
};
