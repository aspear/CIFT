/** 
*    CIFT (Compiler Instrumentation Function Tracer) CTF format metadata 
*    
*    the C representation of the datastructures for reference (see cift.h):
*    
*    typedef enum
*    {
*        CIFT_BUFFER_MODE_CIRCULAR        = 0,
*        CIFT_BUFFER_MODE_FILL_AND_STOP   = 1,
*        CIFT_BUFFER_MODE_FILL_AND_FLUSH  = 2
*    } CIFT_BUFFER_MODE;
*    
*    typedef uint_fast32_t   CIFT_BOOL;      // type used for all boolean operations
*    typedef uint_fast32_t   CIFT_COUNT;     // type used for counts of events as well as the buffer size
*    typedef uint32_t        CIFT_CONTEXT;     // type used for thread id's
*    typedef uint64_t        CIFT_TIMESTAMP;
*    typedef void*           CIFT_ADDR;          // a PC value/function address
*    
*    //enum for the event id's used by this library
*    enum CIFT_EVENT_TYPE_VALUES
*    {
*        CIFT_EVENT_TYPE_INVALID     = 0,
*        CIFT_EVENT_TYPE_FUNC_ENTER  = 1,
*        CIFT_EVENT_TYPE_FUNC_EXIT   = 2,
*    };
*    typedef uint32_t CIFT_EVENT_TYPE;  //explicit sizing of the enum
*    
*    typedef struct
*    {
*        CIFT_EVENT_TYPE event_type;  // the type of the event, see CIFT_EVENT_TYPE
*        CIFT_TIMESTAMP  timestamp;   // high precision timestamp
*        CIFT_CONTEXT    context;     // the thread of the event
*        CIFT_ADDR       func_called; // the function that was called
*        CIFT_ADDR       called_from; // the location that the call was made
*        CIFT_COUNT      event_count; // the event count at the time of recording this event (for debugging)
*    } CIFT_EVENT;
*
*/

enum CIFT_EVENT_TYPE <32> {
  CIFT_EVENT_TYPE_INVALID    = 0,
  CIFT_EVENT_TYPE_FUNC_ENTER = 1,
  CIFT_EVENT_TYPE_FUNC_EXIT  = 2,
};

typealias integer { size = 32; align = 32; signed = false; } : CIFT_CONTEXT;
typealias integer { size = 64; align = 64; signed = false; } : CIFT_TIMESTAMP;
typealias integer { size = 32; align = 32; signed = false; } : CIFT_ADDR;
typealias integer { size = 32; align = 32; signed = false; } : CIFT_COUNT;

struct CIFT_EVENT {
    CIFT_EVENT_TYPE event_type; 
    CIFT_TIMESTAMP  timestamp;   
    CIFT_CONTEXT    context;     
    CIFT_ADDR       func_called; 
    CIFT_ADDR       called_from; 
    CIFT_COUNT      event_count; 
};
